#! /usr/bin/env node

let shell = require('shelljs');
require('shelljs/make');

const wget = require('wget-improved');
const unzip = require('unzipper');
const targz = require('targz');
const fs = require('fs');
const path = require('path');

shell.set('-e'); // any non-0 exit code results in a thrown error
shell.set('-v'); // show effective command

const ALL = 'all';
const INSTALL_ALL = 'install:all';
const INSTALL_CLEAN = 'install:clean';
const CLEAN_INSTALL = 'install:clean_install:all';
const INSTALL_INSTALL = 'install:install';
const INSTALL_POSTINSTALL = 'install:postinstall';
const PATCH_APPLY = 'patch:apply';
const LINK_BIN = 'link:bin';
const INSTALL_PROJSTRUCT = 'install:projstruct';
const INSTALL_CHROMEDRIVER = 'install:chromedriver';
const INSTALL_FIREFOXDRIVER = 'install:firefoxdriver';
const LIST_INSTALLED = 'list:installed';
const CHECK_LINT = 'check:lint';
//
const TEST_CLEAN = 'test:clean';
const TEST_RUN = 'test:run';
const TEST = 'test';
const TEST_DEBUG = 'test:debug';
//
const NODE_MODULES = 'node_modules/';

var logExecutingTarget = function (targetName) {
  console.log('--- ' + targetName + ' ---');
};

global.target[ALL] = global.target[INSTALL_ALL] = function () {
  global.target[INSTALL_INSTALL]();
};

global.target[CLEAN_INSTALL] = function () {
  global.target[INSTALL_CLEAN]();
  global.target[INSTALL_ALL]();
};

global.target[INSTALL_CLEAN] = function () {
  logExecutingTarget(INSTALL_CLEAN);
  let cleaningDir = process.env.npm_package_config_content_base;
  if (!path.isAbsolute(cleaningDir)) {
    shell.rm('-rf', cleaningDir);
  } else {
    throw new Error(`Denied to remove a non-relative dir pathed >>${cleaningDir}<<`);
  }
  cleaningDir = NODE_MODULES;
  if (!path.isAbsolute(cleaningDir)) {
    // lastly, remove including myself
    shell.rm('-rf', cleaningDir);
  } else {
    throw new Error(`Denied to remove a non-relative dir pathed >>${cleaningDir}<<`);
  }
};

global.target[INSTALL_INSTALL] = function () {
  logExecutingTarget(INSTALL_INSTALL);
  shell.exec('yarn install'); // -s is silent
};

global.target[INSTALL_POSTINSTALL] = function () {
  global.target[PATCH_APPLY]();
  global.target[LINK_BIN]();
  global.target[INSTALL_PROJSTRUCT]();
  global.target[INSTALL_CHROMEDRIVER]();
  global.target[INSTALL_FIREFOXDRIVER]();
  global.target[LIST_INSTALLED]();
};

global.target[PATCH_APPLY] = function () {
  logExecutingTarget(PATCH_APPLY);
  shell.set('+e');
  // exitCodes 0 and 1 of patch are 'okay'. 1 means the patch has already been applied
  shell.exec('patch -p0 < patches/patch.silentcopy.FileCollection.js', function (code, output) {
    if (code > 1) throw new Error(code);
  });
  shell.exec('patch -p0 < patches/patch.donotusebabelrc.Mix.js', function (code, output) {
    if (code > 1) throw new Error(code);
  });
  shell.set('-e');
};

global.target[INSTALL_PROJSTRUCT] = function () {
  logExecutingTarget(INSTALL_PROJSTRUCT);
  shell.mkdir('-p', shell.env['npm_package_config_content_base']);
  shell.mkdir('-p', shell.env['npm_package_config_libs_dir']);
};

global.target[LINK_BIN] = function () {
  logExecutingTarget(LINK_BIN);
  shell.pushd('node_modules/.bin');
  shell.ln('-sf', '../webpack-dev-server/bin/webpack-dev-server.js', 'webpack-dev-server');
  shell.ln('-sf', '../webpack/bin/webpack.js', 'webpack');
  shell.popd();
};

global.target[INSTALL_CHROMEDRIVER] = function () {
  logExecutingTarget(INSTALL_CHROMEDRIVER);
  let downloadUrl = shell.env['npm_package_config_chromedriverDownloadUrl'];
  let targetDir = shell.env['npm_package_config_libs_dir'];
  let targetFile = targetDir + 'chromedriver';
  let targetFileAsZip = targetFile + '.zip';
  var download = wget.download(downloadUrl, targetFileAsZip);
  download.on('error', function (err) {
    console.log(err);
    throw err;
  });
  download.on('end', function (output) {
    fs.createReadStream(targetFileAsZip).pipe(unzip.Extract({
        path: targetDir
      }))
      .on('close', function () {
        shell.rm(targetFileAsZip);
        shell.chmod('u+x', targetFile);
      });
  });
};

global.target[INSTALL_FIREFOXDRIVER] = function () {
  logExecutingTarget(INSTALL_FIREFOXDRIVER);
  let downloadUrl = shell.env['npm_package_config_firefoxdriverDownloadUrl'];
  let targetDir = shell.env['npm_package_config_libs_dir'];
  let targetFile = targetDir + 'geckodriver';
  let targetFileAsTarGz = targetFile + '.tar.gz';
  var download = wget.download(downloadUrl, targetFileAsTarGz);
  download.on('error', function (err) {
    console.log(err);
    throw err;
  });
  download.on('end', function (output) {
    targz.decompress({
      src: targetFileAsTarGz,
      dest: targetDir
    }, function (err) {
      if (err) {
        console.log(err);
        throw err;
      }
      shell.rm(targetFileAsTarGz);
      shell.chmod('u+x', targetFile);
    });
  });
};

global.target[LIST_INSTALLED] = function () {
  logExecutingTarget(LIST_INSTALLED);
  shell.exec('yarn list --depth=0 2>/dev/null > $npm_package_config_content_base/installed-dependencies.log');
};

global.target[CHECK_LINT] = function () {
  logExecutingTarget(CHECK_LINT);
  shell.config.fatal = false;
  shell.exec('eslint --ext .js,.vue src/* test/*');
  shell.config.fatal = true;
};

global.target[TEST_CLEAN] = function (argArr) {
  logExecutingTarget(TEST_CLEAN);
  let cleaningDir = process.env.npm_package_config_allure_results_base;
  if (!path.isAbsolute(cleaningDir)) {
    shell.rm('-rf', cleaningDir);
  } else {
    throw new Error(`Denied to remove a non-relative dir pathed >>${cleaningDir}<<`);
  }
};

global.target[TEST_RUN] = global.target[TEST] = function (argArr) { // yarn run test -- specSel=promisify
  logExecutingTarget(TEST_RUN);
  let argO = destructureArgs(argArr, {
    envVars: 'SELENIUM_BROWSER=chrome',
    mochaPreParams: '',
    specSel: '*',
    mochaPostParams: ''
  });
  let command = `cross-env NODE_ENV=test BABEL_ENV=test DEBUG_COLORS=true ${argO.envVars} mocha --opts src/test/mocha.opts --colors ${argO.mochaPreParams} src/test/js/${argO.specSel}.spec.js ${argO.mochaPostParams}`;
  shell.config.fatal = false; // try-catch instead
  shell.exec(command);
  shell.config.fatal = true;
};

global.target[TEST_DEBUG] = function (argArr) {
  logExecutingTarget(TEST_DEBUG);
  let argO = destructureArgs(argArr, {
    envVars: 'SELENIUM_BROWSER=chrome',
    mochaPreParams: '--inspect=9876 --debug-brk',
    specSel: '*',
    mochaPostParams: ''
  });
  let argArrI = restructureArgs(argO);
  global.target[TEST_RUN](restructureArgs(argArrI));
};

/**
 * Destructure an array of string arguments to it's object form. This object is
 * merged into the defaultsO object.
 * @method destructureArgs
 * @param  {string[]}      argsArr   of named ['opt2=arg'] or positional ['arg1', 'arg2', 'arg3'] form
 * @param  {object}        defaultsO the default object the args are merged into
 * @return {object}                  transformed to object form {opt1: 'arg', opt2: 'arg'}
 */
function destructureArgs(argsArr, defaultsO) {
  argsArr && argsArr.forEach(function (arg, index) {
    let key;
    let val = arg; // if positional form
    let splitPosition = arg.indexOf('=');
    if (arg && splitPosition !== -1) { // if named parameter form
      key = arg.substring(0, splitPosition);
      val = arg.substring(splitPosition + 1);
      (defaultsO[key] = val);
    } else if (arg) {
      switch (index) {
        case 0:
          defaultsO.envVars = val;
          break;
        case 1:
          defaultsO.mochaPreParams = val;
          break;
        case 2:
          defaultsO.specSel = val;
          break;
        case 3:
          defaultsO.mochaPostParams = val;
          break;
        default:
          defaultsO[index] = key;
      }
    } else {
      throw new Error(`Unsupported args form of >>${argsArr}<<`);
    }
  });
  // console.log('Transformed argsArr to >>' + JSON.stringify(defaultsO) + '<<');
  return defaultsO;
}

/**
 * An array of strings for each arg. Each is of the form 'opt1=arg'.
 * @method restructureArgs
 * @param  {object}        argsO args as object
 * @return {string[]}            transformed to array named form ['opt1=arg', opt2=arg']
 */
function restructureArgs(argsO) {
  return Object.keys(argsO).map(function (argKey) {
    return `${argKey}=${argsO[argKey]}`;
  });
}
