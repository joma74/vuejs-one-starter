#! /usr/bin/env node

let shell = require('shelljs');
let make = shell.require('make');

// const wget = require('wget-improved');
// const unzip = require('unzipper');
// const fs = require('fs');

shell.set('-e'); // any non-0 exit code results in a thrown error
shell.set('-v'); // show effective command

const INSTALL_CLEAN = 'install:clean';
const INSTALL_INSTALL = 'install:install';
const PATCH_APPLY = 'patch:apply';
const INSTALL_PROJSTRUCT = 'install:projstruct';
const INSTALL_CHROMEDRIVER = 'install:chromedriver';
const LIST_INSTALLED = 'list:installed';
//
const TEST_RUN = 'test:run';
const TEST_DEBUG = 'test:debug';
const TEST_SUREFIRE = 'test:surefire';
//
const NODE_MODULES = 'node_modules/';

var logExecutingTarget = function (targetName) {
  console.log('--- ' + targetName + ' ---');
};

make.target.all = function () {
  make.target[INSTALL_CLEAN]();
  make.target[INSTALL_INSTALL]();
  make.target[PATCH_APPLY]();
  make.target[INSTALL_PROJSTRUCT]();
  make.target[INSTALL_CHROMEDRIVER]();
  make.target[LIST_INSTALLED]();
};

make.target[INSTALL_CLEAN] = function () {
  logExecutingTarget(INSTALL_CLEAN);
  shell.rm('-rf', shell.env['npm_package_config_content_base']);
  // lastly, remove including myself
  shell.rm('-rf', shell.env[NODE_MODULES]);
};

make.target[INSTALL_INSTALL] = function () {
  logExecutingTarget(INSTALL_INSTALL);
  shell.exec('yarn install -s'); // -s is silent
};


make.target[PATCH_APPLY] = function () {
  logExecutingTarget(PATCH_APPLY);
  shell.set('+e');
  // exitCodes 0 and 1 of patch are 'okay'. 1 means the patch has already been applied
  /*
      shell.exec('patch -p0 < patches/patch.relativeconfig.xunit-file.js', function (code, output) {
        if (code > 1) throw new Error(code);
      });
  */
  shell.set('-e');
};

make.target[INSTALL_PROJSTRUCT] = function () {
  logExecutingTarget(INSTALL_PROJSTRUCT);
  shell.mkdir('-p', shell.env['npm_package_config_content_base']);
};

make.target[LIST_INSTALLED] = function () {
  logExecutingTarget(LIST_INSTALLED);
  shell.exec('yarn list --depth=0 2>/dev/null | tee $npm_package_config_content_base/installed-dependencies.log');
};

make.target[TEST_RUN] = make.target['test'] = function (params = '', postChain = '') {
  logExecutingTarget(TEST_RUN);
  let command = `mocha -t 5000 ${params} --harmony_async_await src/test/js/*_test.js ${postChain}`;
  console.log(command);
  shell.exec(command);
};

make.target[TEST_DEBUG] = function () {
  logExecutingTarget(TEST_DEBUG);
  make.target['test:run']('--inspect=9876 --debug-brk');
};

make.target[TEST_SUREFIRE] = function () {
  logExecutingTarget(TEST_SUREFIRE);
  make.target['test:run']('-R xunit-file </dev/null 2>&1', '| tee $npm_package_config_mocha_out_file');
};
