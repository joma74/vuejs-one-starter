#! /usr/bin/env node

let shell = require('shelljs');
require('shelljs/make');

const wget = require('wget-improved');
const unzip = require('unzipper');
const fs = require('fs');

shell.set('-e'); // any non-0 exit code results in a thrown error
shell.set('-v'); // show effective command

const INSTALL_CLEAN = 'install:clean';
const INSTALL_INSTALL = 'install:install';
const INSTALL_POSTINSTALL = 'install:postinstall';
const PATCH_APPLY = 'patch:apply';
const LINK_BIN = 'link:bin';
const INSTALL_PROJSTRUCT = 'install:projstruct';
const INSTALL_CHROMDRIVER = 'install:chromedriver';
const LIST_INSTALLED = 'list:installed';
const CHECK_LINT = 'check:lint';
//
const TEST_RUN = 'test:run';
const TEST_DEBUG = 'test:debug';
const TEST_SUREFIRE = 'test:surefire';
//
const NODE_MODULES = 'node_modules/';

var logExecutingTarget = function (targetName) {
  console.log('--- ' + targetName + ' ---');
};

global.target.all = function () {
  global.target[INSTALL_CLEAN]();
  global.target[INSTALL_INSTALL]();
  global.target[PATCH_APPLY]();
  global.target[LINK_BIN]();
  global.target[INSTALL_PROJSTRUCT]();
  global.target[LIST_INSTALLED]();
};

global.target[INSTALL_CLEAN] = function () {
  logExecutingTarget(INSTALL_CLEAN);
  shell.rm('-rf', shell.env['npm_package_config_content_base']);
  // lastly, remove including myself
  shell.rm('-rf', NODE_MODULES);
};

global.target[INSTALL_INSTALL] = function () {
  logExecutingTarget(INSTALL_INSTALL);
  shell.exec('yarn install -s'); // -s is silent
};

global.target[INSTALL_POSTINSTALL] = function () {
  global.target[PATCH_APPLY]();
  global.target[LINK_BIN]();
  global.target[INSTALL_PROJSTRUCT]();
  global.target[INSTALL_CHROMDRIVER]();
  global.target[LIST_INSTALLED]();
};

global.target[PATCH_APPLY] = function () {
  logExecutingTarget(PATCH_APPLY);
  shell.set('+e');
  // exitCodes 0 and 1 of patch are 'okay'. 1 means the patch has already been applied
  shell.exec('patch -p0 < patches/patch.relativeconfig.xunit-file.js', function (code, output) {
    if (code > 1) throw new Error(code);
  });
  shell.set('-e');
};

global.target[INSTALL_PROJSTRUCT] = function () {
  logExecutingTarget(INSTALL_PROJSTRUCT);
  shell.mkdir('-p', shell.env['npm_package_config_content_base']);
  shell.mkdir('-p', shell.env['npm_package_config_libs_dir']);
};

global.target[LINK_BIN] = function () {
  logExecutingTarget(LINK_BIN);
  shell.pushd('node_modules/.bin');
  shell.ln('-sf', '../webpack-dev-server/bin/webpack-dev-server.js', 'webpack-dev-server');
  shell.ln('-sf', '../webpack/bin/webpack.js', 'webpack');
  shell.popd();
};

global.target[INSTALL_CHROMDRIVER] = function () {
  logExecutingTarget(INSTALL_CHROMDRIVER);
  let chromedriverDownloadUrl = shell.env['npm_package_config_chromedriverDownloadUrl'];
  let targetDir = shell.env['npm_package_config_libs_dir'];
  let targetFile = targetDir + 'chromedriver';
  let targetFileAsZip = targetFile + '.zip';
  var chromedriverDownload = wget.download(chromedriverDownloadUrl, targetFileAsZip);
  chromedriverDownload.on('error', function (err) {
    console.log(err);
    throw err;
  });
  chromedriverDownload.on('end', function (output) {
    fs.createReadStream(targetFileAsZip).pipe(unzip.Extract({
        path: targetDir
      }))
      .on('close', function () {
        shell.rm(targetFileAsZip);
        shell.chmod('u+x', targetFile);
      });
  });
};

global.target[LIST_INSTALLED] = function () {
  logExecutingTarget(LIST_INSTALLED);
  shell.exec('yarn list --depth=0 2>/dev/null > $npm_package_config_content_base/installed-dependencies.log');
};

global.target[CHECK_LINT] = function () {
  logExecutingTarget(CHECK_LINT);
  shell.config.fatal = false;
  shell.exec('eslint --ext .js,.vue src/* test/*');
  shell.config.fatal = true;
};

global.target[TEST_RUN] = global.target['test'] = function (params = '', postChain = '') {
  logExecutingTarget(TEST_RUN);
  let command = `mocha -t 5000 --bail ${params} --compilers js:babel-core/register --require babel-polyfill --harmony_async_await src/test/js/*spec.js ${postChain}`;
  console.log(command);
  shell.config.fatal = false; // try-catch instead
  shell.exec(command);
  shell.config.fatal = true;
};

global.target[TEST_DEBUG] = function () {
  logExecutingTarget(TEST_DEBUG);
  global.target[TEST_RUN]('--inspect=9876 --debug-brk');
};

global.target[TEST_SUREFIRE] = function () {
  logExecutingTarget(TEST_SUREFIRE);
  global.target[TEST_RUN]('-R xunit-file </dev/null 2>&1', '| tee $npm_package_config_mocha_out_file');
};
